var width = getProperty("graphic", "width");
var height = getProperty("graphic", "height");
var arrowSize = 10;
var arrowOffset = 5;
var count=1;
setActiveCanvas("graphic");
setScreen("SpiegazioneLivello");
drawAxes();
hideElement("infosection");

function show(){
  showElement("infosection");
  showElement("info1");
  showElement("info2");
  setText("info1", " ");
  setText("info2", " ");
}


var levels = {"1": "line",
              "2": "circle",
              "3": "parabola",
              "4": "ellipse"
};

function drawAxes() {
    line(0, height / 2, width, height / 2); 
    line(width / 2, 0, width / 2, height);
    line(width - arrowOffset, height / 2 - arrowSize / 2, width, height / 2); 
    line(width - arrowOffset, height / 2 + arrowSize / 2, width, height / 2); 
    line(width / 2 - arrowSize / 2, arrowOffset, width / 2, 0); 
    line(width / 2 + arrowSize / 2, arrowOffset, width / 2, 0); 
}


// Livello 1: Retta
function isLinearFunction(equation) {
    var linePatterns = [
        /^\s*(y\s*=\s*[+-]?\s*\d*\s*\*\s*x\s*[+-]?\s*\d+|x\s*=\s*[+-]?\s*\d+|y\s*=\s*[+-]?\s*\d*\s*\*\s*x|y\s*=[+-]?\s*\d*\s*\+\s*\d*\s*\*\s*x|y\s*=[+-]?\s*\d*\s*\+\s*x|y\s*=\s*x\s*[+-]?\s*\d+)\s*$/,
        /^\s*(y\s*=\s*[+-]?\s*\d*\s*\*\s*x\s*[+-]?\s*\d+|x\s*=\s*[+-]?\s*\d+|y\s*=\s*[+-]?\s*\d*\s*\*\s*x|y\s*=[+-]?\s*\d*\s*\+\s*\d*\s*\*\s*x|y\s*=[+-]?\s*\d*\s*\+\s*x|y\s*=\s*x)\s*$/,
        /^\s*(y\s*=\s*[+-]?\s*\d+(\.\d+)?\s*\*\s*x\s*[+-]?\s*\d+(\.\d+)?|x\s*=\s*[+-]?\s*\d+(\.\d+)?|y\s*=\s*[+-]?\s*\d+(\.\d+)?\s*\*\s*x|y\s*=[+-]?\s*\d+(\.\d+)?\s*\+\s*\d+(\.\d+)?\s*\*\s*x|y\s*=[+-]?\s*\d+(\.\d+)?\s*\+\s*x|y\s*=\s*x\s*[+-]?\s*\d+(\.\d+)?)\s*$/,
        /^\s*(y\s*=\s*[+-]?\s*\d+x\s*[+-]?\s*\d+|x\s*=\s*[+-]?\s*\d+|y\s*=\s*[+-]?\s*\d+x|y\s*=[+-]?\s*\d+\s*\+\s*\d+x|y\s*=[+-]?\s*\d+\s*\+\s*x|y\s*=\s*x)\s*$/,
        /^\s*(y\s*=\s*-x)\s*$/,
        /^\s*(y\s*=\s*-x\s*[+-]\s*\d+)\s*$/
    ];

    for (var i = 0; i < linePatterns.length; i++) {
        if (linePatterns[i].test(equation)) {
            return true;
        }
    }
    return false;
}

function drawLinearFunction(equation) {
  equation = equation.replace(/(\d)([a-zA-Z])/g, "$1 * $2");
  var f;
  try {
      console.log("La funzione inserita è: " + equation);
      f = Function("x", "return " + equation + ";");
  } catch (error) {
      console.log("Errore durante la creazione della funzione: " + error.message);
      return;
  }

   for (var i = 0; i < width; i++) {
        var y = height / 2 - f((i - width / 2) / 10) * 10;
        line(i, y, i+1, height / 2 - f(((i+1) - width / 2) / 10) * 10);
    }
}


//Livello 2: Cerchio
function isCircleFunction(equation) {
    // Controlla se l'equazione è  x^2+y^2=4, y^2+x^2=4, x^2+y^2-4=0 o y^2+x^2-4=0
    var pattern = /^(x\^2\+y\^2=4)$|^(y\^2\+x\^2=4)$|^(x\^2\+y\^2-4=0)$|^(y\^2\+x\^2-4=0)$/;
    return pattern.test(equation);
}

function isCircle(equation) {
  if (!isCircleFunction(equation)) {

   var circlePatterns = [
        /^(x\^2\s*\+\s*y\^2\s*=\s*\d+)$/,   // x^2 + y^2 = r^2
        /^(y\^2\s*\+\s*x\^2\s*=\s*\d+)$/  // y^2 + x^2 = r^2
  ];
    for (var i = 0; i < circlePatterns.length; i++) {
        if (circlePatterns[i].test(equation)) {
            return true;
        }
    }
    return false;
  }
}


function extractCircleABC(equation){
  var pattern = /^(\d*)x\^2\+?(\d*)y\^2=(\d+)$/;
  var matches = equation.match(pattern);
  var a = matches[1] ? parseInt(matches[1]) : 1; 
  var b = matches[2] ? parseInt(matches[2]) : 1; 
  var c = parseInt(matches[3]); 
  
  console.log(a);
  console.log(b);
  console.log(c);
  a=parseInt(a);
  b=parseInt(b);
  return a, b, c;
}


function drawCircle(a, b, c, equation, canonic){
  var scale = Math.min(width, height) / 320; 
  var radius;
  var infoText;
  var centerX;
  var centerY;
  if(canonic){
    a, b, c=extractCircleABC(equation);
    centerX = width / 2 + a * scale;
    centerY = height / 2 - b * scale;
    c=parseInt(c);
    radius=Math.sqrt(c);
    radius=radius.toFixed(2);
    console.log(radius);
    infoText = "C(0,0)" +"  r=" + radius;
  }else{
    var g = -a / 2;
    var f = -b / 2;
    centerX = width / 2 + g * scale;
    centerY = height / 2 - f * scale;
    var intermediateValue = Math.pow(g, 2) + Math.pow(f, 2) - c;
    
     if (intermediateValue >= 0) {
      radius = Math.sqrt(intermediateValue);
      radius = radius.toFixed(2);
      infoText = "C(" + (-g) + "," + (-f) + ")   r=" + radius;
     } else {
      radius = 0;
      infoText = "Invalid equation, r<0";
      }

    
  }
  setText("info2", infoText);
  setFillColor(rgb(255, 255, 255, 0)); 
  circle(centerX, centerY, Math.abs(radius) * scale * 2); 
}




// Livello 3: Parabola
function isParabolaFunction(equation) {
    var parabolaPattern = /^y\s*=\s*2\s*(\*\s*)?x\s*\^\s*2\s*$/i;
    return  parabolaPattern.test(equation);
}


function isParab(funcString) {
  if(!isParabolaFunction(funcString)){
    var parabolaPattern = /^y\s*=\s*-?\d*\s*(\*\s*)?x\s*\^\s*2\s*([+-]\s*\d*\s*)?x?\s*([+-]\s*\d+(\.\d+)?)?$/i;
    var test=parabolaPattern.test(funcString);
    console.log("è una parabola? "+ test);
    return test;
  }
}

function drawParabolaFunction(equation) {
  var parabolaPattern;
  var match;
  var a, b, c;
  if(isParabolaFunction(equation)){
      var range = 10;
      var scaleFactor = Math.min(width, height) / (4);
      a=2;
      b=0;
      c=0;
      var originOffsetX = width / 2;
      var originOffsetY = height /  2 ; 
  }
  else{
      var range = 2;
      var scaleFactor = Math.min(width, height) / (4);
      parabolaPattern = /^y\s*=\s*(-?\d*\.*\d*)\s*(\*\s*)?x\s*\^\s*2\s*([+-]\s*\d*\.*\d*)?\s*x\s*([+-]\s*\d+(\.\d+)?)?$/i;
      match = equation.match(parabolaPattern);
      if (match === null) {
        console.log('Invalid equation');
        return;
      }
      a = parseFloat(match[1] || '1');
      b = parseFloat(match[3] || '0');
      c = parseFloat(match[4] || '0');

      var originOffsetX = width / 2;
      var originOffsetY = height /  2 - 150; 
  }

    var h = -b / (2 * a);
    var k = c - Math.pow(b, 2) / (4 * a);
    var infoText = "V(" + h.toFixed(1) + "," + k.toFixed(1) + ")";
  
    var focusX = h;
    var focusY = k + 1 / (4 * a);
    var focusText = "F(" + focusX.toFixed(1) + "," + focusY.toFixed(1) + ")";
    setText("info2", focusText+" " +infoText);
  
  
    var prevX, prevY;
    for (var x = -range; x <= range; x += 0.01) {
      var y = a * Math.pow(x, 2) + b * x + c;
      var canvasX = x * scaleFactor + originOffsetX;
      var canvasY = -y * scaleFactor + originOffsetY;
      if (prevX !== undefined && prevY !== undefined) {
        line(prevX, prevY, canvasX, canvasY);
      }
      prevX = canvasX;
      prevY = canvasY;
    }
}


// Livello 4: Ellisse
function isEllipseFunction(equation) {
  var ellipsePattern = /\(x\s*\^\s*2\s*\/\s*25\)\s*\+\s*\(y\s*\^\s*2\s*\/\s*9\)\s*=\s*1/;
  var ellipsePattern2 = /\s*x\s*\^\s*2\s*\/\s*25\s*\+\s*y\s*\^\s*2\s*\/\s*9\s*=\s*1/;
  console.log(equation);
  var isEllisse = ellipsePattern.test(equation) || ellipsePattern2.test(equation);
  if (ellipsePattern2.test(equation)) {
    equation = equation.replace(/\s*x\s*\^\s*2\s*\/\s*25\s*\+\s*y\s*\^\s*2\s*\/\s*9\s*=\s*1/, "(x^2/25) + (y^2/9) = 1");
  }
  return isEllisse, equation;
}


function isEllipse(equation) {
 if (!isEllipseFunction(equation)) {
      equation = equation.replace(/\s/g, '');
      // Controlliamo se l'equazione è nel formato corretto (x^2/a^2) + (y^2/b^2) = 1
      var ellipseRegex = /\((x\^2\/(\d+))\)\+\((y\^2\/(\d+))\)=1/;
      var matches = equation.match(ellipseRegex);

      if (matches) {
         var aSquared = parseInt(matches[2]);
         var bSquared = parseInt(matches[4]);

         if (aSquared > 0 && bSquared > 0 && aSquared !== bSquared) {
            return true;
         }
      }
   }
   return false;
}

function drawEllipse(a, b, equation) {
  var scale = Math.min(width, height) / 150;
  var centerX = width / 2;
  var centerY = height / 2;
  var matches = equation.match(/\((x\^2\/(\d+))\)\+\((y\^2\/(\d+))\)=1/);
  if (matches) {
    var aSquared = parseInt(matches[2]);
    var bSquared = parseInt(matches[4]);
    console.log(aSquared);
    console.log(bSquared);

    if (aSquared > 0 && bSquared > 0) {
      var semiMajorAxis = Math.sqrt(aSquared) * scale;
      var semiMinorAxis = Math.sqrt(bSquared) * scale;
      for (var x = centerX - semiMajorAxis; x <= centerX + semiMajorAxis; x += 0.01) {
        var y1 = centerY - Math.sqrt(1 - Math.pow((x - centerX) / semiMajorAxis, 2)) * semiMinorAxis;
        var y2 = centerY + Math.sqrt(1 - Math.pow((x - centerX) / semiMajorAxis, 2)) * semiMinorAxis;
        line(x, y1, x, y2);
      }
      
      var infoText = "Semi-Major Axis: " + semiMajorAxis.toFixed(2) + ", Semi-Minor Axis: " + semiMinorAxis.toFixed(2);
      setText("info2", infoText);
      
      return;
    }
  }
  setText("info2", "Invalid ellipse equation");
}



onEvent("equal", "click", function() {
    setActiveCanvas("graphic");
    clearCanvas();
    drawAxes();
    hideElement("alert");
    show();
    
    
    var funcString = getText("function1").trim();
    funcString = funcString.replace(/\s/g, '');
    funcString = funcString.toLowerCase();
    console.log(funcString);
    var functionType = levels[count];
    setText("info1","Eq: "+funcString);

    if (!functionType) {
        console.log("Livello non valido!");
        return;
    }
    switch (functionType) {
        case "line":
            if (!isLinearFunction(funcString)) {
                showElement("alert");
                setText("alert", "Error. For level " + count + ", enter the equation of a line in the form y=.");
                return;
            }
            drawLinearFunction(funcString);
            break;
        
        case "circle":

            if (!isCircleFunction(funcString) & !isCircle(funcString)) {
                showElement("alert");
                setText("alert", "Error. For level " + count + ", enter the equation of a circle with center at the origin of the axes.");
                return;
            }
            else if(isCircle(funcString)){
              showElement("alert");
              setText("alert", "The equation inserted is a Circle but not the equation of a circle with center at the origin of the axes. I will try to draw it. ");
        
              drawCircle(1, 1,1, funcString, true);
              return;

            }
            drawCircle(1, 1,1, funcString, true);
            break;
      
            
        case "parabola":
            if (!isParabolaFunction(funcString) & !isParab(funcString)) {
                showElement("alert");
                setText("alert", "Error. For level " + count + ", enter the equation of a parabola passing through the point (1,2) and having the vertex at the origin.");
                return;
            } 
            else if (isParab(funcString)) {
                showElement("alert");
                setText("alert", "The equation inserted is a parabola, but not the equation of a parabola passing through the point (1,2) and having the vertex at the origin. I will try to draw it.");
                drawParabolaFunction(funcString);
                return;
            }
            drawParabolaFunction(funcString);
            break;
        
                    
        case "ellipse":
            if (!isEllipseFunction(funcString) & !isEllipse(funcString)) {
                showElement("alert");
                setText("alert", "Error. For level " + count + ", enter the equation of an ellipse with vertices at points v1:(5, 0), v2: (-5, 0), v3:(0,3), v4:(0,-3)");
                return;
            } 
            else if (isEllipse(funcString)) {
                showElement("alert");
                setText("alert", "The equation inserted is an ellipse, but not the equation of an ellipse with vertices at points v1:(5, 0), v2: (-5, 0), v3:(0,3), v4:(0,-3). I will try to draw it.");
                drawEllipse(1,2,funcString);

                return;
            }
            var ellipsePattern = /\s*x\s*\^\s*2\s*\/\s*25\s*\+\s*y\s*\^\s*2\s*\/\s*9\s*=\s*1/;
            if (ellipsePattern.test(funcString)) {
              funcString = funcString.replace(/\s*x\s*\^\s*2\s*\/\s*25\s*\+\s*y\s*\^\s*2\s*\/\s*9\s*=\s*1/, "(x^2/25)+(y^2/9)=1");
            }
            console.log(funcString);
            drawEllipse(1, 1, funcString);
            break;

        default:
            break;
    }
    
    count++;
    if (count === 5) {
              showElement("final");
              return; 
            }
    else{
      showElement("next");
    }
});


onEvent("next", "click", function( ) {
  hideElement("next");
  setScreen("SpiegazioneLivello");
  setText("Livello", count);
  show();
  if(count==1){
    setText("Funzione", "Line in explicit form (with values)");
  }
  else if(count==2){
    setText("Funzione", "Circle with r=2 and center at (0,0)");
  }
  else if(count==3){
    setText("Funzione", "Parabola with vertex at (0,0) and passing through (1,2)");
  }
  else if(count==4){
    setText("Funzione", "Ellipse with vertices at (5,0), (-5,0), (0,3), (0,-3)");
  }

});


onEvent("draw", "click", function( ) {
  show();
  var a = parseInt(getText("a").trim());
  var b = parseInt(getText("b").trim());
  var c = parseInt(getText("c").trim());
  var equation="";
   if (count === 1) {
        if (!isNaN(a) && !isNaN(b) && !isNaN(c)) {
            var m=(-a / b);
            m=m.toFixed(2);
            setText("info2","m="+m);
            var q=(-c / b);
            q=q.toFixed(2);
            equation = "y=" + m + "x+" +q;
            equation = equation.replace(/\s/g, '');
            setActiveCanvas("graphic");
            clearCanvas();
            drawAxes();
            drawLinearFunction(equation);
            setText("info1", "Equation: " + equation);
            showElement("alert");
            setText("alert", "Remember that you have to insert the equation of the line in the form y=mx+q in order to proceed to the next level. (on the left side)");
        } else {
            showElement("alert");
            setText("alert", "Make sure to enter all values for a, b, and c.");
        }
  }
  else if(count==2){
      if (!isNaN(a) && !isNaN(b) && !isNaN(c)) {
        equation = "x^2+y^2+" + a + "x+" + b + "y+" + c + "=0";
        console.log(equation);
        setActiveCanvas("graphic");
        clearCanvas();
        drawAxes();
        drawCircle(a, b, c, equation, false);
        showElement("info1");
        setText("info1", "Equation:" + equation);
        showElement("alert");
        setText("alert", "Remember that you have to insert the equation of the circle with center at the origin and the radius=2.");
    } else {
            showElement("alert");
            setText("alert", "Make sure to enter all values for a, b, and c.");
            }
  }
  else if(count==3){
    if (!isNaN(a) && !isNaN(b) && !isNaN(c)) {
      equation = "y = " + a + "x^2 " + (b < 0 ? "-" : "+") + " " + Math.abs(b) + "x " + (c < 0 ? "-" : "+") + " " + Math.abs(c);
      console.log(equation);
      setActiveCanvas("graphic");
      clearCanvas();
      drawAxes();
      equation = equation.replace(/\s/g, ''); // Remove white spaces
      setText("info1", "Equation: " + equation);
      drawParabolaFunction(equation);
      showElement("alert");
      setText("alert", "Remember that you have to insert the equation of the parabola with the vertex at the origin and passing through the point (1,2) in order to proceed to the next level.");
    } else {
      showElement("alert");
      console.log("Make sure to enter all the values a, b and c.");
      setText("alert", "Make sure to enter all the values a, b and c.");
    }
  }
  else if(count==4){
    if(!isNaN(c)){
      showElement("alert");
      setText("alert", "You can't insert c for ellipse equation.");
    }
    else if (!isNaN(a) && !isNaN(b)) {
      equation = "(x^2/" + a*a + ") + (y^2/"+b*b+ ") = 1";
      equation = equation.replace(/\s/g, ''); 
      console.log(equation);
      setActiveCanvas("graphic");
      clearCanvas();
      drawAxes();
      setText("info1", "Eq: " + equation);
      showElement("alert");
      drawEllipse(a, b, equation);
      setText("alert", "Remember that you have to insert the equation of the ellipse with the vertices at points v1:(5, 0), v2: (-5, 0), v3:(0,3), v4:(0,-3) in order to proceed to the next level.");
    } else {
      showElement("alert");
      console.log("Make sure to enter all the values a, b.");
      setText("alert", "Make sure to enter all the values a, b.");
    }

  }
  
});

onEvent("ok", "click", function( ) {
  clearCanvas();
  drawAxes();
  hideElement("alert");
  setText("LevelN", count);
  setScreen("Homepage");
  setText("function1", "");
  console.log(count);

});